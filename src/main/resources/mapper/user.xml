<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.repository.UserRepository">

	<select id="findById" resultType="com.example.demo.repository.model.User">
		select * from user_tb
		where id = #{id}
	</select>
	<select id="findByNickname" resultType="com.example.demo.repository.model.User">
		select * from user_tb
		where nickname = #{nickname}
	</select>
	<select id="findLikeNicknameSize" resultType="Integer">
		select count(*) from user_tb
		where nickname like #{nickname}
	</select>
	<select id="findLikeNickname" resultType="com.example.demo.repository.model.User">
		select * from user_tb
		where nickname like #{nickname}
		order by id limit #{limit} offset #{offset}
	</select>
	<select id="findByEmail" resultType="com.example.demo.repository.model.User">
		select * from user_tb
		where email = #{email}
	</select>
	
	<update id="updatePasswordByEmail">
		update user_tb set password = #{password}
		where email = #{email}
	</update>
	
	<select id="findByUserId" resultType="com.example.demo.repository.model.User">
		select * from user_tb
		where user_id = #{id}
	</select>
	
	<!-- 친구 요청 추가 -->
	<insert id="insertWatingFriend">
		insert into waiting_friend_tb(user_id,friend_id)
		values(#{userId}, #{friendId})
	</insert>
	
	<!-- 친구 추가 -->
	<insert id="addFriendById">
		insert into friend_tb(user_id,friend_id)
		values(#{userId}, #{friendId}),
			  (#{friendId}, #{userId})
	</insert>
	
	<!-- 친구 삭제 -->
	<delete id="removeFriendById">
		delete from friend_tb
		where user_id = #{userId} and
			friend_id = #{friendId}
	</delete>
	
	<!-- 친구 요청 삭제 -->
	<delete id="removeWaitFriendById">
		delete from waiting_friend_tb
		where user_id = #{userId} and
			friend_id = #{friendId}
	</delete>
	
	<!-- 아직 나에게 친구 요청을 보낸게 유효한지 -->
	<select id="checkStillWait" resultType="Integer">
		select user_id from waiting_friend_tb
		where user_id = #{userId} and
			friend_id = #{friendId}
	</select>
	
	<!-- 온라인친구 or 오프라인친구 목록 가져오기 -->
	<select id="checkStatusFriend" resultType="com.example.demo.repository.model.User">
		select u.upload_file_name as upload_file_name, f.friend_id as user_id, u.nickname as nickname
		 from user_tb as u join friend_tb as f
		on u.user_id = f.friend_id
		where f.user_id = #{id} and u.online_status = #{status}
	</select>
	
	<!-- 친구 목록 리스트 가져오기 -->
	<select id="checkFriendList" resultType="com.example.demo.repository.model.User">
		select u.upload_file_name as upload_file_name, f.friend_id as user_id, u.nickname as nickname
		 from user_tb as u join friend_tb as f
		on u.user_id = f.friend_id
		where f.user_id = #{id}
	</select>
	
	<!-- 나에게 친구 요청을 보낸 유저들 -->
	<select id="checkWaitFriend" resultType="com.example.demo.repository.model.User">
		select u.upload_file_name as upload_file_name, w.user_id as user_id, u.nickname as nickname
		 from user_tb as u join waiting_friend_tb as w
		on u.user_id = w.user_id
		where w.friend_id = #{id}
	</select>
	
	<!-- 내가 친구 요청을 보낸 유저들 -->
	<select id="checkSendFriend" resultType="com.example.demo.repository.model.User">
		select u.upload_file_name as upload_file_name, w.friend_id as user_id, u.nickname as nickname
		from user_tb as u join waiting_friend_tb as w
		on u.user_id = w.friend_id
		where w.user_id = #{id}
	</select>
	
	<!-- 접속하면 온라인으로 변경 -->
	<update id="changeUserOnline">
		update user_tb set online_status = 1
		where user_id = #{userId}
	</update>
	
	<!-- 접속 종료하면 오프라인으로 변경 -->
	<update id="changeUserOffline">
		update user_tb set online_status = 0
		where user_id = #{userId}
	</update>	
	
	<update id="updateCurrentCash">
		update user_tb set current_cash = current_cash + #{amount}
		where user_id = #{userId}
	</update>
	
	<insert id="insert">
		insert into user_tb(id, password, username, nickname, birth_date, email, phone_number)
		values(#{id}, #{password}, #{username}, #{nickname}, #{birthDate}, #{email}, #{phoneNumber})
	</insert>
	
	<select id="getLectureCash">
    	SELECT lecture_cash FROM user_tb WHERE user_id = #{userId}
	</select>
	
	
	
</mapper>