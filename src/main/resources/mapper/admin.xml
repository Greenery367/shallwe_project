<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.repository.AdminRepository">

	<!-- 전체 유저수 계산 -->
	<select id="countNumberOfUser" resultType="int">
		select count(*) from user_tb
	</select>

	<!-- 전체유저 충전 금액 -->
	<select id="countChargeAmount"> 
		select sum(amount) from order_tb
	</select>

	<!-- 전체유저 사용 금액  -->
	<select id="countSpendAmount"> 
		select sum(spend) from spend_tb
	</select>
	
	<!--전체 유저 캐쉬 사용률 -->
	<select id="countSpendAmountRate">
		SELECT round((SELECT SUM(spend) FROM spend_tb) / (SELECT SUM(amount) FROM order_tb) * 100,1)
	</select>
	
	<!-- 10일간 캐시 충전 최종승인된 내역 조회 -->
	<select id="selectChargeAmountBetweenTenDays" resultType="com.example.demo.dto.CashChargeGraphVO">
		select * from order_tb 
        where status = 1 
        and created_at between DATE_SUB(NOW(), INTERVAL 10 DAY) and NOW() 
        order by created_at   
	</select>
	
	<!-- 일별 충전 총합 계산 -->
	<select id="countChargeAmountOneDay" resultType="int">
		select sum(amount) FROM order_tb where date(created_at) = #{createdAt} group by date(created_at)
	</select>
	
	<!-- 일별 충전 + 사용 총합 리스트 -->
	<select id="countChargeAmountAllDay"  resultType="com.example.demo.dto.CashChargeGraphVO">
		SELECT 
		    DATE(o.created_at) AS createdAt, 
		    SUM(o.amount) AS amount, 
		    SUM(s.spend) AS spend
		FROM 
		    order_tb o
		LEFT JOIN 
		    spend_tb s
		ON 
		    DATE(o.created_at) = DATE(s.created_at)
		GROUP BY 
		    DATE(o.created_at)
		ORDER BY 
		    DATE(o.created_at);
	</select>
	
	
	
	<!-- 전체 광고 조회 -->
	<select id="selectAllAdvertise">
		select * from advertise_tb
	</select>
	
	<!-- id로 광고 조회 -->
	<select id="selectAdvertiseById">
		select * from advertise_tb where id = #{id}
	</select>
	
	<!-- 광고 추가 -->
	<insert id="insertAdvertise">
		insert into advertise_tb(place_id, title, customer, link, origin_file_name, upload_file_name, start_date, end_date, status)
		values(#{placeId}, #{title}, #{customer}, #{link}, #{originFileName}, #{uploadFileName}, #{startDate}, #{endDate}, #{status})
	</insert>
	
	<!-- 광고 수정 -->
	<update id="updateAdvertise">
			update advertise_tb set place_id = #{placeId},
							title = #{title},
	                        customer = #{customer},
	                        link = #{link},
	                        start_date = #{startDate},
	                        end_date = #{endDate},
	                        status = #{status}
	                        where id=#{id}
	</update>
	
	<!-- 광고 삭제 -->
	<delete id="deleteAdvertiseById">
		delete from advertise_tb where id=#{id}
	</delete>
	
	
	<!-- 현재 게시중인 광고 조회 -->
	<select id="selectAdvertiseNow">
		select * from advertise_tb where status = 1
	</select>
	
	<!-- 만료된 광고 중 상태가 1인 광고 조회 -->
	<select id="selectExpiredAdvertise" resultType="long">
		select id from advertise_tb where end_date &lt; #{now} AND status = 1
	</select>
	
	<!-- 광고 상태 업데이트 -->
	<update id="updateAdvertiseStatus">
		update advertise_tb set status = #{status} where id = #{id}
	</update>
	
	<!-- 게시중인 광고 위치별조회 -->
	<!-- 위치별로 place_id 지정됨 -->
	<!-- place_id = 1 -->
	<select id="selectAdvertisePlaceOne">
		select * from advertise_tb where place_id = 1 and status = 1
	</select>
	
	<!-- place_id = 2 -->
	<select id="selectAdvertisePlaceTwo">
		select * from advertise_tb where place_id = 2 and status = 1
	</select>
	
	<!-- place_id = 3 -->
	<select id="selectAdvertisePlaceThree">
		select * from advertise_tb where place_id = 3 and status = 1
	</select>
	
	<!-- 관리자 로그인 - 입력받은 id로 관리자 테이블 조회하여 관리자 정보 반환 -->
	<select id="findbyId" resultType="com.example.demo.repository.model.Admin">
		select * from admin_tb where admin_id = #{adminId}
	</select>
	
	<!-- 광고별 게시일 계산 -->
	<select id="selectPostingPeriodById">
		SELECT DATEDIFF(end_date, start_date) FROM advertise_tb where id = #{id}
	</select>
	
	<!-- 광고별 위치 금액 조회 -->
	<select id="selectAdvertisePriceById">
		select p.price from advertise_tb as a join ad_place_tb as p on a.place_id = p.id where a.id = #{id}
	</select>
	

</mapper>